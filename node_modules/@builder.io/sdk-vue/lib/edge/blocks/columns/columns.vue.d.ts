import type { SizeName } from "../../constants/device-sizes";
import type { Dictionary } from "../../types/typescript";
import type { Column } from "./columns.types";
type CSSVal = string | number;
declare const _default: import("vue").DefineComponent<Readonly<{
    builderContext?: any;
    columns?: any;
    space?: any;
    stackColumnsAt?: any;
    reverseColumnsWhenStacked?: any;
    builderComponents?: any;
    builderBlock?: any;
    builderLinkComponent?: any;
}>, unknown, {
    gutterSize: number;
    cols: any;
    stackAt: any;
    flexDir: string;
    TARGET: import("../../types/targets").Target;
    getColumnsClass: (id?: string | undefined) => string;
}, {}, {
    getTagName(column: Column): any;
    getWidth(index: number): any;
    getColumnCssWidth(index: number): string;
    getTabletStyle({ stackedStyle, desktopStyle, }: {
        stackedStyle: CSSVal;
        desktopStyle: CSSVal;
    }): CSSVal;
    getMobileStyle({ stackedStyle, desktopStyle, }: {
        stackedStyle: CSSVal;
        desktopStyle: CSSVal;
    }): CSSVal;
    columnsCssVars(): Dictionary<string>;
    columnCssVars(index: number): Dictionary<string>;
    getWidthForBreakpointSize(size: SizeName): number;
    columnsStyles(): string;
    getAttributes(column: any, index: number): {
        style: string | Partial<CSSStyleDeclaration>;
        href?: any;
    };
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<Readonly<{
    builderContext?: any;
    columns?: any;
    space?: any;
    stackColumnsAt?: any;
    reverseColumnsWhenStacked?: any;
    builderComponents?: any;
    builderBlock?: any;
    builderLinkComponent?: any;
}>>>, {
    readonly builderContext?: any;
    readonly columns?: any;
    readonly space?: any;
    readonly stackColumnsAt?: any;
    readonly reverseColumnsWhenStacked?: any;
    readonly builderComponents?: any;
    readonly builderBlock?: any;
    readonly builderLinkComponent?: any;
}, {}>;
export default _default;
