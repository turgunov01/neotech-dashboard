import type { BuilderContextInterface, RegisteredComponents } from "../../context/types";
import type { BuilderBlock } from "../../types/builder-block";
export type BlockProps = {
    block: BuilderBlock;
    context: BuilderContextInterface;
    registeredComponents: RegisteredComponents;
    linkComponent: any;
};
declare const _default: import("vue").DefineComponent<Readonly<{
    context?: any;
    block?: any;
    linkComponent?: any;
    registeredComponents?: any;
}>, unknown, unknown, {
    blockComponent(): import("../../context/types").RegisteredComponent | null | undefined;
    repeatItem(): import("./types").RepeatData[] | undefined;
    processedBlock(): any;
    Tag(): any;
    canShowBlock(): any;
    childrenWithoutParentComponent(): any;
    componentRefProps(): {
        blockChildren: any;
        componentRef: any;
        componentOptions: any;
        context: any;
        linkComponent: any;
        registeredComponents: any;
        builderBlock: any;
        includeBlockProps: boolean;
        isInteractive: boolean;
    };
}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<Readonly<{
    context?: any;
    block?: any;
    linkComponent?: any;
    registeredComponents?: any;
}>>>, {
    readonly context?: any;
    readonly block?: any;
    readonly linkComponent?: any;
    readonly registeredComponents?: any;
}, {}>;
export default _default;
