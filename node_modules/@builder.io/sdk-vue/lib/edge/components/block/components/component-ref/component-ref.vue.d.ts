import type { ComponentProps } from "./component-ref.helpers";
declare const _default: import("vue").DefineComponent<Readonly<{
    context?: any;
    builderBlock?: any;
    linkComponent?: any;
    registeredComponents?: any;
    includeBlockProps?: any;
    blockChildren?: any;
    componentRef?: any;
    componentOptions?: any;
    isInteractive?: any;
}>, unknown, {
    Wrapper: any;
    getWrapperProps: ({ componentOptions, builderBlock, context, componentRef, includeBlockProps, isInteractive, contextValue }: Omit<ComponentProps, "registeredComponents" | "blockChildren"> & {
        contextValue: import("../../../../context/types").BuilderContextInterface;
    }) => import("../interactive-element.vue").InteractiveElementProps | {
        attributes?: {
            'builder-id': string | undefined;
            style: string | Partial<CSSStyleDeclaration>;
            href: any;
        } | {
            [index: string]: any;
        } | undefined;
        builderBlock: import("../../../..").BuilderBlock;
        builderContext: import("../../../../context/types").BuilderContextInterface;
    };
}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<Readonly<{
    context?: any;
    builderBlock?: any;
    linkComponent?: any;
    registeredComponents?: any;
    includeBlockProps?: any;
    blockChildren?: any;
    componentRef?: any;
    componentOptions?: any;
    isInteractive?: any;
}>>>, {
    readonly context?: any;
    readonly builderBlock?: any;
    readonly linkComponent?: any;
    readonly registeredComponents?: any;
    readonly includeBlockProps?: any;
    readonly blockChildren?: any;
    readonly componentRef?: any;
    readonly componentOptions?: any;
    readonly isInteractive?: any;
}, {}>;
export default _default;
