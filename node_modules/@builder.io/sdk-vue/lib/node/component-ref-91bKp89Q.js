import { defineComponent as m, openBlock as r, createBlock as a, resolveDynamicComponent as k, mergeProps as u, withCtx as d, renderSlot as h, resolveComponent as B, normalizeProps as P, createElementBlock as g, Fragment as $, renderList as v, createCommentVNode as S } from "vue";
import { f, B as W, w } from "./index-QePuMUih.js";
import { a as b, g as R } from "./get-block-properties-LS4sGehE.js";
const x = m({
  name: "interactive-element",
  props: ["includeBlockProps", "block", "context", "wrapperProps", "Wrapper"],
  computed: {
    attributes() {
      return this.includeBlockProps ? {
        ...b({
          block: this.block,
          context: this.context
        }),
        ...R({
          block: this.block,
          rootState: this.context.rootState,
          rootSetState: this.context.rootSetState,
          localState: this.context.localState,
          context: this.context.context
        })
      } : {};
    }
  }
});
function I(e, t, p, s, o, c) {
  return r(), a(k(e.Wrapper), u({ attributes: e.attributes }, e.wrapperProps), {
    default: d(() => [
      h(e.$slots, "default")
    ]),
    _: 3
  }, 16, ["attributes"]);
}
const l = /* @__PURE__ */ f(x, [["render", I]]), E = ({
  componentOptions: e,
  builderBlock: t,
  context: p,
  componentRef: s,
  includeBlockProps: o,
  isInteractive: c,
  contextValue: i
}) => {
  const n = {
    ...e,
    /**
     * If `noWrap` is set to `true`, then the block's props/attributes are provided to the
     * component itself directly. Otherwise, they are provided to the wrapper element.
     */
    ...o ? {
      attributes: b({
        block: t,
        context: i
      })
    } : {}
  };
  return c ? {
    Wrapper: s,
    block: t,
    context: p,
    wrapperProps: e,
    includeBlockProps: o
  } : n;
}, y = m({
  name: "component-ref",
  components: { Block: W, InteractiveElement: l },
  props: [
    "isInteractive",
    "componentRef",
    "componentOptions",
    "builderBlock",
    "context",
    "linkComponent",
    "includeBlockProps",
    "blockChildren",
    "registeredComponents"
  ],
  data() {
    return {
      Wrapper: this.isInteractive ? w(l) : this.componentRef,
      getWrapperProps: E
    };
  }
});
function A(e, t, p, s, o, c) {
  const i = B("Block");
  return e.componentRef ? (r(), a(k(e.Wrapper), P(u(
    { key: 0 },
    e.getWrapperProps({
      componentOptions: e.componentOptions,
      builderBlock: e.builderBlock,
      context: e.context,
      componentRef: e.componentRef,
      linkComponent: e.linkComponent,
      includeBlockProps: e.includeBlockProps,
      isInteractive: e.isInteractive,
      contextValue: e.context
    })
  )), {
    default: d(() => [
      (r(!0), g($, null, v(e.blockChildren, (n, C) => (r(), a(i, {
        key: n.id,
        block: n,
        context: e.context,
        registeredComponents: e.registeredComponents,
        linkComponent: e.linkComponent
      }, null, 8, ["block", "context", "registeredComponents", "linkComponent"]))), 128))
    ]),
    _: 1
  }, 16)) : S("", !0);
}
const D = /* @__PURE__ */ f(y, [["render", A]]);
export {
  D as default
};
